// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/20/2023 16:15:44"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_vlg_sample_tst(
	A,
	B,
	C,
	D,
	E,
	clk,
	d,
	sampler_tx
);
input [7:0] A;
input [7:0] B;
input [7:0] C;
input [7:0] D;
input [7:0] E;
input  clk;
input  d;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or C or D or E or clk or d)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module main_vlg_check_tst (
	DATA_OUT,
	F,
	out,
	sampler_rx
);
input [15:0] DATA_OUT;
input [15:0] F;
input  out;
input sampler_rx;

reg [15:0] DATA_OUT_expected;
reg [15:0] F_expected;
reg  out_expected;

reg [15:0] DATA_OUT_prev;
reg [15:0] F_prev;
reg  out_prev;

reg [15:0] DATA_OUT_expected_prev;
reg [15:0] F_expected_prev;
reg  out_expected_prev;

reg [15:0] last_DATA_OUT_exp;
reg [15:0] last_F_exp;
reg  last_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	DATA_OUT_prev = DATA_OUT;
	F_prev = F;
	out_prev = out;
end

// update expected /o prevs

always @(trigger)
begin
	DATA_OUT_expected_prev = DATA_OUT_expected;
	F_expected_prev = F_expected;
	out_expected_prev = out_expected;
end


// expected DATA_OUT[ 15 ]
initial
begin
	DATA_OUT_expected[15] = 1'bX;
end 
// expected DATA_OUT[ 14 ]
initial
begin
	DATA_OUT_expected[14] = 1'bX;
end 
// expected DATA_OUT[ 13 ]
initial
begin
	DATA_OUT_expected[13] = 1'bX;
end 
// expected DATA_OUT[ 12 ]
initial
begin
	DATA_OUT_expected[12] = 1'bX;
end 
// expected DATA_OUT[ 11 ]
initial
begin
	DATA_OUT_expected[11] = 1'bX;
end 
// expected DATA_OUT[ 10 ]
initial
begin
	DATA_OUT_expected[10] = 1'bX;
end 
// expected DATA_OUT[ 9 ]
initial
begin
	DATA_OUT_expected[9] = 1'bX;
end 
// expected DATA_OUT[ 8 ]
initial
begin
	DATA_OUT_expected[8] = 1'bX;
end 
// expected DATA_OUT[ 7 ]
initial
begin
	DATA_OUT_expected[7] = 1'bX;
end 
// expected DATA_OUT[ 6 ]
initial
begin
	DATA_OUT_expected[6] = 1'bX;
end 
// expected DATA_OUT[ 5 ]
initial
begin
	DATA_OUT_expected[5] = 1'bX;
end 
// expected DATA_OUT[ 4 ]
initial
begin
	DATA_OUT_expected[4] = 1'bX;
end 
// expected DATA_OUT[ 3 ]
initial
begin
	DATA_OUT_expected[3] = 1'bX;
end 
// expected DATA_OUT[ 2 ]
initial
begin
	DATA_OUT_expected[2] = 1'bX;
end 
// expected DATA_OUT[ 1 ]
initial
begin
	DATA_OUT_expected[1] = 1'bX;
end 
// expected DATA_OUT[ 0 ]
initial
begin
	DATA_OUT_expected[0] = 1'bX;
end 
// expected F[ 15 ]
initial
begin
	F_expected[15] = 1'bX;
end 
// expected F[ 14 ]
initial
begin
	F_expected[14] = 1'bX;
end 
// expected F[ 13 ]
initial
begin
	F_expected[13] = 1'bX;
end 
// expected F[ 12 ]
initial
begin
	F_expected[12] = 1'bX;
end 
// expected F[ 11 ]
initial
begin
	F_expected[11] = 1'bX;
end 
// expected F[ 10 ]
initial
begin
	F_expected[10] = 1'bX;
end 
// expected F[ 9 ]
initial
begin
	F_expected[9] = 1'bX;
end 
// expected F[ 8 ]
initial
begin
	F_expected[8] = 1'bX;
end 
// expected F[ 7 ]
initial
begin
	F_expected[7] = 1'bX;
end 
// expected F[ 6 ]
initial
begin
	F_expected[6] = 1'bX;
end 
// expected F[ 5 ]
initial
begin
	F_expected[5] = 1'bX;
end 
// expected F[ 4 ]
initial
begin
	F_expected[4] = 1'bX;
end 
// expected F[ 3 ]
initial
begin
	F_expected[3] = 1'bX;
end 
// expected F[ 2 ]
initial
begin
	F_expected[2] = 1'bX;
end 
// expected F[ 1 ]
initial
begin
	F_expected[1] = 1'bX;
end 
// expected F[ 0 ]
initial
begin
	F_expected[0] = 1'bX;
end 

// expected out
initial
begin
	out_expected = 1'bX;
end 
// generate trigger
always @(DATA_OUT_expected or DATA_OUT or F_expected or F or out_expected or out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DATA_OUT = %b | expected F = %b | expected out = %b | ",DATA_OUT_expected_prev,F_expected_prev,out_expected_prev);
	$display("| real DATA_OUT = %b | real F = %b | real out = %b | ",DATA_OUT_prev,F_prev,out_prev);
`endif
	if (
		( DATA_OUT_expected_prev[0] !== 1'bx ) && ( DATA_OUT_prev[0] !== DATA_OUT_expected_prev[0] )
		&& ((DATA_OUT_expected_prev[0] !== last_DATA_OUT_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[0] = DATA_OUT_expected_prev[0];
	end
	if (
		( DATA_OUT_expected_prev[1] !== 1'bx ) && ( DATA_OUT_prev[1] !== DATA_OUT_expected_prev[1] )
		&& ((DATA_OUT_expected_prev[1] !== last_DATA_OUT_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[1] = DATA_OUT_expected_prev[1];
	end
	if (
		( DATA_OUT_expected_prev[2] !== 1'bx ) && ( DATA_OUT_prev[2] !== DATA_OUT_expected_prev[2] )
		&& ((DATA_OUT_expected_prev[2] !== last_DATA_OUT_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[2] = DATA_OUT_expected_prev[2];
	end
	if (
		( DATA_OUT_expected_prev[3] !== 1'bx ) && ( DATA_OUT_prev[3] !== DATA_OUT_expected_prev[3] )
		&& ((DATA_OUT_expected_prev[3] !== last_DATA_OUT_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[3] = DATA_OUT_expected_prev[3];
	end
	if (
		( DATA_OUT_expected_prev[4] !== 1'bx ) && ( DATA_OUT_prev[4] !== DATA_OUT_expected_prev[4] )
		&& ((DATA_OUT_expected_prev[4] !== last_DATA_OUT_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[4] = DATA_OUT_expected_prev[4];
	end
	if (
		( DATA_OUT_expected_prev[5] !== 1'bx ) && ( DATA_OUT_prev[5] !== DATA_OUT_expected_prev[5] )
		&& ((DATA_OUT_expected_prev[5] !== last_DATA_OUT_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[5] = DATA_OUT_expected_prev[5];
	end
	if (
		( DATA_OUT_expected_prev[6] !== 1'bx ) && ( DATA_OUT_prev[6] !== DATA_OUT_expected_prev[6] )
		&& ((DATA_OUT_expected_prev[6] !== last_DATA_OUT_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[6] = DATA_OUT_expected_prev[6];
	end
	if (
		( DATA_OUT_expected_prev[7] !== 1'bx ) && ( DATA_OUT_prev[7] !== DATA_OUT_expected_prev[7] )
		&& ((DATA_OUT_expected_prev[7] !== last_DATA_OUT_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[7] = DATA_OUT_expected_prev[7];
	end
	if (
		( DATA_OUT_expected_prev[8] !== 1'bx ) && ( DATA_OUT_prev[8] !== DATA_OUT_expected_prev[8] )
		&& ((DATA_OUT_expected_prev[8] !== last_DATA_OUT_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[8] = DATA_OUT_expected_prev[8];
	end
	if (
		( DATA_OUT_expected_prev[9] !== 1'bx ) && ( DATA_OUT_prev[9] !== DATA_OUT_expected_prev[9] )
		&& ((DATA_OUT_expected_prev[9] !== last_DATA_OUT_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[9] = DATA_OUT_expected_prev[9];
	end
	if (
		( DATA_OUT_expected_prev[10] !== 1'bx ) && ( DATA_OUT_prev[10] !== DATA_OUT_expected_prev[10] )
		&& ((DATA_OUT_expected_prev[10] !== last_DATA_OUT_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[10] = DATA_OUT_expected_prev[10];
	end
	if (
		( DATA_OUT_expected_prev[11] !== 1'bx ) && ( DATA_OUT_prev[11] !== DATA_OUT_expected_prev[11] )
		&& ((DATA_OUT_expected_prev[11] !== last_DATA_OUT_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[11] = DATA_OUT_expected_prev[11];
	end
	if (
		( DATA_OUT_expected_prev[12] !== 1'bx ) && ( DATA_OUT_prev[12] !== DATA_OUT_expected_prev[12] )
		&& ((DATA_OUT_expected_prev[12] !== last_DATA_OUT_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[12] = DATA_OUT_expected_prev[12];
	end
	if (
		( DATA_OUT_expected_prev[13] !== 1'bx ) && ( DATA_OUT_prev[13] !== DATA_OUT_expected_prev[13] )
		&& ((DATA_OUT_expected_prev[13] !== last_DATA_OUT_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[13] = DATA_OUT_expected_prev[13];
	end
	if (
		( DATA_OUT_expected_prev[14] !== 1'bx ) && ( DATA_OUT_prev[14] !== DATA_OUT_expected_prev[14] )
		&& ((DATA_OUT_expected_prev[14] !== last_DATA_OUT_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[14] = DATA_OUT_expected_prev[14];
	end
	if (
		( DATA_OUT_expected_prev[15] !== 1'bx ) && ( DATA_OUT_prev[15] !== DATA_OUT_expected_prev[15] )
		&& ((DATA_OUT_expected_prev[15] !== last_DATA_OUT_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[15] = DATA_OUT_expected_prev[15];
	end
	if (
		( F_expected_prev[0] !== 1'bx ) && ( F_prev[0] !== F_expected_prev[0] )
		&& ((F_expected_prev[0] !== last_F_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[0] = F_expected_prev[0];
	end
	if (
		( F_expected_prev[1] !== 1'bx ) && ( F_prev[1] !== F_expected_prev[1] )
		&& ((F_expected_prev[1] !== last_F_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[1] = F_expected_prev[1];
	end
	if (
		( F_expected_prev[2] !== 1'bx ) && ( F_prev[2] !== F_expected_prev[2] )
		&& ((F_expected_prev[2] !== last_F_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[2] = F_expected_prev[2];
	end
	if (
		( F_expected_prev[3] !== 1'bx ) && ( F_prev[3] !== F_expected_prev[3] )
		&& ((F_expected_prev[3] !== last_F_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[3] = F_expected_prev[3];
	end
	if (
		( F_expected_prev[4] !== 1'bx ) && ( F_prev[4] !== F_expected_prev[4] )
		&& ((F_expected_prev[4] !== last_F_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[4] = F_expected_prev[4];
	end
	if (
		( F_expected_prev[5] !== 1'bx ) && ( F_prev[5] !== F_expected_prev[5] )
		&& ((F_expected_prev[5] !== last_F_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[5] = F_expected_prev[5];
	end
	if (
		( F_expected_prev[6] !== 1'bx ) && ( F_prev[6] !== F_expected_prev[6] )
		&& ((F_expected_prev[6] !== last_F_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[6] = F_expected_prev[6];
	end
	if (
		( F_expected_prev[7] !== 1'bx ) && ( F_prev[7] !== F_expected_prev[7] )
		&& ((F_expected_prev[7] !== last_F_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[7] = F_expected_prev[7];
	end
	if (
		( F_expected_prev[8] !== 1'bx ) && ( F_prev[8] !== F_expected_prev[8] )
		&& ((F_expected_prev[8] !== last_F_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[8] = F_expected_prev[8];
	end
	if (
		( F_expected_prev[9] !== 1'bx ) && ( F_prev[9] !== F_expected_prev[9] )
		&& ((F_expected_prev[9] !== last_F_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[9] = F_expected_prev[9];
	end
	if (
		( F_expected_prev[10] !== 1'bx ) && ( F_prev[10] !== F_expected_prev[10] )
		&& ((F_expected_prev[10] !== last_F_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[10] = F_expected_prev[10];
	end
	if (
		( F_expected_prev[11] !== 1'bx ) && ( F_prev[11] !== F_expected_prev[11] )
		&& ((F_expected_prev[11] !== last_F_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[11] = F_expected_prev[11];
	end
	if (
		( F_expected_prev[12] !== 1'bx ) && ( F_prev[12] !== F_expected_prev[12] )
		&& ((F_expected_prev[12] !== last_F_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[12] = F_expected_prev[12];
	end
	if (
		( F_expected_prev[13] !== 1'bx ) && ( F_prev[13] !== F_expected_prev[13] )
		&& ((F_expected_prev[13] !== last_F_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[13] = F_expected_prev[13];
	end
	if (
		( F_expected_prev[14] !== 1'bx ) && ( F_prev[14] !== F_expected_prev[14] )
		&& ((F_expected_prev[14] !== last_F_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[14] = F_expected_prev[14];
	end
	if (
		( F_expected_prev[15] !== 1'bx ) && ( F_prev[15] !== F_expected_prev[15] )
		&& ((F_expected_prev[15] !== last_F_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[15] = F_expected_prev[15];
	end
	if (
		( out_expected_prev !== 1'bx ) && ( out_prev !== out_expected_prev )
		&& ((out_expected_prev !== last_out_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_exp = out_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg [7:0] C;
reg [7:0] D;
reg [7:0] E;
reg clk;
reg d;
// wires                                               
wire [15:0] DATA_OUT;
wire [15:0] F;
wire out;

wire sampler;                             

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.DATA_OUT(DATA_OUT),
	.E(E),
	.F(F),
	.clk(clk),
	.d(d),
	.out(out)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
	A[7] = #50000 1'b1;
	A[7] = #20000 1'b0;
	A[7] = #40000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #30000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #20000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #20000 1'b1;
	A[7] = #30000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #20000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #20000 1'b0;
	A[7] = #20000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #20000 1'b0;
	A[7] = #20000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #40000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #30000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #70000 1'b1;
	A[7] = #20000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #30000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #20000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #40000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #40000 1'b0;
	A[7] = #10000 1'b1;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
	A[6] = #40000 1'b1;
	A[6] = #50000 1'b0;
	A[6] = #10000 1'b1;
	A[6] = #20000 1'b0;
	A[6] = #10000 1'b1;
	A[6] = #20000 1'b0;
	A[6] = #20000 1'b1;
	A[6] = #30000 1'b0;
	A[6] = #50000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #10000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #30000 1'b1;
	A[6] = #30000 1'b0;
	A[6] = #20000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #10000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #30000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #30000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #10000 1'b1;
	A[6] = #20000 1'b0;
	A[6] = #10000 1'b1;
	A[6] = #40000 1'b0;
	A[6] = #20000 1'b1;
	A[6] = #20000 1'b0;
	A[6] = #20000 1'b1;
	A[6] = #20000 1'b0;
	A[6] = #60000 1'b1;
	A[6] = #30000 1'b0;
	A[6] = #30000 1'b1;
	A[6] = #30000 1'b0;
	A[6] = #10000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #10000 1'b1;
	A[6] = #20000 1'b0;
	A[6] = #10000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #50000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #10000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #20000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #10000 1'b1;
	A[6] = #10000 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #20000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #20000 1'b0;
	A[5] = #40000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #30000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #20000 1'b1;
	A[5] = #50000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #20000 1'b0;
	A[5] = #20000 1'b1;
	A[5] = #20000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #30000 1'b0;
	A[5] = #20000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #20000 1'b1;
	A[5] = #20000 1'b0;
	A[5] = #30000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #30000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #20000 1'b0;
	A[5] = #20000 1'b1;
	A[5] = #20000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #30000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #20000 1'b0;
	A[5] = #30000 1'b1;
	A[5] = #20000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #30000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #20000 1'b1;
	A[5] = #20000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #60000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #60000 1'b1;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
	A[4] = #20000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #20000 1'b1;
	A[4] = #40000 1'b0;
	A[4] = #30000 1'b1;
	A[4] = #20000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #20000 1'b1;
	A[4] = #30000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #20000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #60000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #20000 1'b0;
	A[4] = #30000 1'b1;
	A[4] = #20000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #20000 1'b0;
	A[4] = #20000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #20000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #20000 1'b1;
	A[4] = #20000 1'b0;
	A[4] = #20000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #30000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #20000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #30000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #80000 1'b1;
	A[4] = #30000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #20000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #20000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #60000 1'b1;
	A[4] = #10000 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #70000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #30000 1'b1;
	A[3] = #30000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #20000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #30000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #20000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #40000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #20000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #20000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #20000 1'b0;
	A[3] = #30000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #20000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #40000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #30000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #30000 1'b0;
	A[3] = #30000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #30000 1'b0;
	A[3] = #10000 1'b1;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #50000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #30000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #20000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #20000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #20000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #20000 1'b1;
	A[2] = #20000 1'b0;
	A[2] = #60000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #50000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #20000 1'b1;
	A[2] = #50000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #20000 1'b0;
	A[2] = #30000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #20000 1'b1;
	A[2] = #30000 1'b0;
	A[2] = #20000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #20000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #30000 1'b1;
	A[2] = #30000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #20000 1'b0;
	A[2] = #40000 1'b1;
	A[2] = #40000 1'b0;
	A[2] = #20000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #20000 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
	A[1] = #20000 1'b1;
	A[1] = #30000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #20000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #20000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #40000 1'b1;
	A[1] = #50000 1'b0;
	A[1] = #40000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #70000 1'b1;
	A[1] = #30000 1'b0;
	A[1] = #20000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #30000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #20000 1'b1;
	A[1] = #30000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #30000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #40000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #30000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #30000 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #30000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #30000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #20000 1'b0;
	A[0] = #20000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #40000 1'b1;
	A[0] = #30000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #20000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #50000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #20000 1'b0;
	A[0] = #60000 1'b1;
	A[0] = #40000 1'b0;
	A[0] = #20000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #40000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #50000 1'b1;
	A[0] = #20000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #50000 1'b0;
	A[0] = #20000 1'b1;
	A[0] = #40000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #20000 1'b1;
	A[0] = #30000 1'b0;
	A[0] = #30000 1'b1;
	A[0] = #40000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #30000 1'b0;
	A[0] = #20000 1'b1;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
	B[7] = #10000 1'b1;
	B[7] = #10000 1'b0;
	B[7] = #10000 1'b1;
	B[7] = #20000 1'b0;
	B[7] = #10000 1'b1;
	B[7] = #30000 1'b0;
	B[7] = #40000 1'b1;
	B[7] = #20000 1'b0;
	B[7] = #10000 1'b1;
	B[7] = #20000 1'b0;
	B[7] = #10000 1'b1;
	B[7] = #10000 1'b0;
	B[7] = #10000 1'b1;
	B[7] = #10000 1'b0;
	B[7] = #10000 1'b1;
	B[7] = #20000 1'b0;
	B[7] = #20000 1'b1;
	B[7] = #20000 1'b0;
	B[7] = #40000 1'b1;
	B[7] = #20000 1'b0;
	B[7] = #20000 1'b1;
	B[7] = #20000 1'b0;
	B[7] = #40000 1'b1;
	B[7] = #50000 1'b0;
	B[7] = #10000 1'b1;
	B[7] = #20000 1'b0;
	B[7] = #30000 1'b1;
	B[7] = #20000 1'b0;
	B[7] = #10000 1'b1;
	B[7] = #30000 1'b0;
	B[7] = #10000 1'b1;
	B[7] = #10000 1'b0;
	B[7] = #40000 1'b1;
	B[7] = #30000 1'b0;
	B[7] = #20000 1'b1;
	B[7] = #10000 1'b0;
	B[7] = #50000 1'b1;
	B[7] = #10000 1'b0;
	B[7] = #10000 1'b1;
	B[7] = #20000 1'b0;
	B[7] = #20000 1'b1;
	B[7] = #10000 1'b0;
	B[7] = #20000 1'b1;
	B[7] = #10000 1'b0;
	B[7] = #40000 1'b1;
	B[7] = #10000 1'b0;
	B[7] = #10000 1'b1;
	B[7] = #10000 1'b0;
	B[7] = #20000 1'b1;
	B[7] = #10000 1'b0;
	B[7] = #10000 1'b1;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
	B[6] = #10000 1'b1;
	B[6] = #30000 1'b0;
	B[6] = #10000 1'b1;
	B[6] = #30000 1'b0;
	B[6] = #10000 1'b1;
	B[6] = #10000 1'b0;
	B[6] = #20000 1'b1;
	B[6] = #10000 1'b0;
	B[6] = #10000 1'b1;
	B[6] = #90000 1'b0;
	B[6] = #30000 1'b1;
	B[6] = #20000 1'b0;
	B[6] = #10000 1'b1;
	B[6] = #10000 1'b0;
	B[6] = #10000 1'b1;
	B[6] = #10000 1'b0;
	B[6] = #20000 1'b1;
	B[6] = #20000 1'b0;
	B[6] = #10000 1'b1;
	B[6] = #30000 1'b0;
	B[6] = #30000 1'b1;
	B[6] = #10000 1'b0;
	B[6] = #10000 1'b1;
	B[6] = #20000 1'b0;
	B[6] = #20000 1'b1;
	B[6] = #10000 1'b0;
	B[6] = #20000 1'b1;
	B[6] = #40000 1'b0;
	B[6] = #20000 1'b1;
	B[6] = #10000 1'b0;
	B[6] = #30000 1'b1;
	B[6] = #10000 1'b0;
	B[6] = #20000 1'b1;
	B[6] = #30000 1'b0;
	B[6] = #10000 1'b1;
	B[6] = #10000 1'b0;
	B[6] = #30000 1'b1;
	B[6] = #20000 1'b0;
	B[6] = #10000 1'b1;
	B[6] = #10000 1'b0;
	B[6] = #20000 1'b1;
	B[6] = #20000 1'b0;
	B[6] = #10000 1'b1;
	B[6] = #10000 1'b0;
	B[6] = #10000 1'b1;
	B[6] = #10000 1'b0;
	B[6] = #10000 1'b1;
	B[6] = #20000 1'b0;
	B[6] = #30000 1'b1;
	B[6] = #20000 1'b0;
	B[6] = #10000 1'b1;
	B[6] = #20000 1'b0;
	B[6] = #10000 1'b1;
	B[6] = #10000 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
	B[5] = #20000 1'b1;
	B[5] = #10000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #10000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #10000 1'b0;
	B[5] = #40000 1'b1;
	B[5] = #10000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #20000 1'b0;
	B[5] = #30000 1'b1;
	B[5] = #10000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #10000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #20000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #30000 1'b0;
	B[5] = #70000 1'b1;
	B[5] = #20000 1'b0;
	B[5] = #40000 1'b1;
	B[5] = #10000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #10000 1'b0;
	B[5] = #20000 1'b1;
	B[5] = #20000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #30000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #10000 1'b0;
	B[5] = #40000 1'b1;
	B[5] = #10000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #10000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #20000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #20000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #20000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #10000 1'b0;
	B[5] = #90000 1'b1;
	B[5] = #10000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #20000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #80000 1'b0;
	B[5] = #40000 1'b1;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #20000 1'b0;
	B[4] = #20000 1'b1;
	B[4] = #10000 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #10000 1'b0;
	B[4] = #30000 1'b1;
	B[4] = #30000 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #40000 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #10000 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #20000 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #20000 1'b0;
	B[4] = #30000 1'b1;
	B[4] = #10000 1'b0;
	B[4] = #50000 1'b1;
	B[4] = #10000 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #30000 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #30000 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #10000 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #10000 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #10000 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #20000 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #10000 1'b0;
	B[4] = #50000 1'b1;
	B[4] = #10000 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #10000 1'b0;
	B[4] = #50000 1'b1;
	B[4] = #20000 1'b0;
	B[4] = #30000 1'b1;
	B[4] = #20000 1'b0;
	B[4] = #30000 1'b1;
	B[4] = #40000 1'b0;
	B[4] = #30000 1'b1;
	B[4] = #10000 1'b0;
	B[4] = #40000 1'b1;
	B[4] = #20000 1'b0;
	B[4] = #20000 1'b1;
	B[4] = #40000 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
	B[3] = #30000 1'b1;
	B[3] = #40000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #20000 1'b0;
	B[3] = #20000 1'b1;
	B[3] = #40000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #30000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #20000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #90000 1'b0;
	B[3] = #20000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #40000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #30000 1'b1;
	B[3] = #50000 1'b0;
	B[3] = #30000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #20000 1'b1;
	B[3] = #20000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #60000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #20000 1'b0;
	B[3] = #20000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #30000 1'b0;
	B[3] = #30000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #20000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #20000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #20000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #20000 1'b1;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #30000 1'b0;
	B[2] = #30000 1'b1;
	B[2] = #50000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #30000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #20000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #30000 1'b0;
	B[2] = #20000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #20000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #40000 1'b1;
	B[2] = #20000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #30000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #20000 1'b0;
	B[2] = #20000 1'b1;
	B[2] = #20000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #30000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #30000 1'b0;
	B[2] = #30000 1'b1;
	B[2] = #20000 1'b0;
	B[2] = #30000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #30000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #30000 1'b0;
	B[2] = #20000 1'b1;
	B[2] = #30000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #40000 1'b1;
	B[2] = #50000 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #20000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #70000 1'b0;
	B[1] = #60000 1'b1;
	B[1] = #40000 1'b0;
	B[1] = #30000 1'b1;
	B[1] = #30000 1'b0;
	B[1] = #20000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #70000 1'b0;
	B[1] = #50000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #30000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #30000 1'b0;
	B[1] = #20000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #40000 1'b1;
	B[1] = #30000 1'b0;
	B[1] = #50000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #20000 1'b1;
	B[1] = #90000 1'b0;
	B[1] = #30000 1'b1;
	B[1] = #30000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #20000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #10000 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
	B[0] = #20000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #30000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #30000 1'b1;
	B[0] = #20000 1'b0;
	B[0] = #20000 1'b1;
	B[0] = #20000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #30000 1'b1;
	B[0] = #40000 1'b0;
	B[0] = #50000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #20000 1'b1;
	B[0] = #20000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #20000 1'b0;
	B[0] = #30000 1'b1;
	B[0] = #20000 1'b0;
	B[0] = #50000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #20000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #70000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #20000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #20000 1'b0;
	B[0] = #30000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #30000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #30000 1'b1;
	B[0] = #40000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #60000 1'b1;
	B[0] = #20000 1'b0;
	B[0] = #10000 1'b1;
end 
// C[ 7 ]
initial
begin
	C[7] = 1'b0;
	C[7] = #20000 1'b1;
	C[7] = #20000 1'b0;
	C[7] = #10000 1'b1;
	C[7] = #20000 1'b0;
	C[7] = #70000 1'b1;
	C[7] = #30000 1'b0;
	C[7] = #10000 1'b1;
	C[7] = #10000 1'b0;
	C[7] = #10000 1'b1;
	C[7] = #30000 1'b0;
	C[7] = #10000 1'b1;
	C[7] = #50000 1'b0;
	C[7] = #10000 1'b1;
	C[7] = #50000 1'b0;
	C[7] = #10000 1'b1;
	C[7] = #10000 1'b0;
	C[7] = #20000 1'b1;
	C[7] = #20000 1'b0;
	C[7] = #10000 1'b1;
	C[7] = #20000 1'b0;
	C[7] = #10000 1'b1;
	C[7] = #10000 1'b0;
	C[7] = #10000 1'b1;
	C[7] = #30000 1'b0;
	C[7] = #10000 1'b1;
	C[7] = #10000 1'b0;
	C[7] = #10000 1'b1;
	C[7] = #30000 1'b0;
	C[7] = #10000 1'b1;
	C[7] = #10000 1'b0;
	C[7] = #20000 1'b1;
	C[7] = #10000 1'b0;
	C[7] = #20000 1'b1;
	C[7] = #30000 1'b0;
	C[7] = #10000 1'b1;
	C[7] = #10000 1'b0;
	C[7] = #10000 1'b1;
	C[7] = #40000 1'b0;
	C[7] = #10000 1'b1;
	C[7] = #20000 1'b0;
	C[7] = #20000 1'b1;
	C[7] = #10000 1'b0;
	C[7] = #10000 1'b1;
	C[7] = #10000 1'b0;
	C[7] = #10000 1'b1;
	C[7] = #50000 1'b0;
	C[7] = #10000 1'b1;
	C[7] = #10000 1'b0;
	C[7] = #10000 1'b1;
	C[7] = #50000 1'b0;
	C[7] = #20000 1'b1;
	C[7] = #10000 1'b0;
	C[7] = #10000 1'b1;
end 
// C[ 6 ]
initial
begin
	C[6] = 1'b0;
	C[6] = #10000 1'b1;
	C[6] = #10000 1'b0;
	C[6] = #10000 1'b1;
	C[6] = #10000 1'b0;
	C[6] = #70000 1'b1;
	C[6] = #10000 1'b0;
	C[6] = #10000 1'b1;
	C[6] = #10000 1'b0;
	C[6] = #10000 1'b1;
	C[6] = #10000 1'b0;
	C[6] = #20000 1'b1;
	C[6] = #30000 1'b0;
	C[6] = #60000 1'b1;
	C[6] = #20000 1'b0;
	C[6] = #40000 1'b1;
	C[6] = #20000 1'b0;
	C[6] = #10000 1'b1;
	C[6] = #20000 1'b0;
	C[6] = #20000 1'b1;
	C[6] = #20000 1'b0;
	C[6] = #30000 1'b1;
	C[6] = #10000 1'b0;
	C[6] = #20000 1'b1;
	C[6] = #10000 1'b0;
	C[6] = #10000 1'b1;
	C[6] = #10000 1'b0;
	C[6] = #20000 1'b1;
	C[6] = #10000 1'b0;
	C[6] = #10000 1'b1;
	C[6] = #40000 1'b0;
	C[6] = #10000 1'b1;
	C[6] = #10000 1'b0;
	C[6] = #20000 1'b1;
	C[6] = #10000 1'b0;
	C[6] = #10000 1'b1;
	C[6] = #10000 1'b0;
	C[6] = #20000 1'b1;
	C[6] = #10000 1'b0;
	C[6] = #20000 1'b1;
	C[6] = #10000 1'b0;
	C[6] = #10000 1'b1;
	C[6] = #30000 1'b0;
	C[6] = #10000 1'b1;
	C[6] = #20000 1'b0;
	C[6] = #20000 1'b1;
	C[6] = #20000 1'b0;
	C[6] = #10000 1'b1;
	C[6] = #10000 1'b0;
	C[6] = #10000 1'b1;
	C[6] = #20000 1'b0;
	C[6] = #20000 1'b1;
	C[6] = #20000 1'b0;
	C[6] = #10000 1'b1;
	C[6] = #20000 1'b0;
	C[6] = #10000 1'b1;
	C[6] = #10000 1'b0;
	C[6] = #10000 1'b1;
end 
// C[ 5 ]
initial
begin
	C[5] = 1'b0;
	C[5] = #10000 1'b1;
	C[5] = #10000 1'b0;
	C[5] = #30000 1'b1;
	C[5] = #10000 1'b0;
	C[5] = #20000 1'b1;
	C[5] = #50000 1'b0;
	C[5] = #10000 1'b1;
	C[5] = #10000 1'b0;
	C[5] = #30000 1'b1;
	C[5] = #10000 1'b0;
	C[5] = #20000 1'b1;
	C[5] = #10000 1'b0;
	C[5] = #10000 1'b1;
	C[5] = #30000 1'b0;
	C[5] = #10000 1'b1;
	C[5] = #10000 1'b0;
	C[5] = #10000 1'b1;
	C[5] = #10000 1'b0;
	C[5] = #30000 1'b1;
	C[5] = #20000 1'b0;
	C[5] = #70000 1'b1;
	C[5] = #30000 1'b0;
	C[5] = #10000 1'b1;
	C[5] = #10000 1'b0;
	C[5] = #10000 1'b1;
	C[5] = #10000 1'b0;
	C[5] = #20000 1'b1;
	C[5] = #50000 1'b0;
	C[5] = #20000 1'b1;
	C[5] = #20000 1'b0;
	C[5] = #20000 1'b1;
	C[5] = #20000 1'b0;
	C[5] = #10000 1'b1;
	C[5] = #10000 1'b0;
	C[5] = #20000 1'b1;
	C[5] = #10000 1'b0;
	C[5] = #10000 1'b1;
	C[5] = #10000 1'b0;
	C[5] = #30000 1'b1;
	C[5] = #20000 1'b0;
	C[5] = #20000 1'b1;
	C[5] = #10000 1'b0;
	C[5] = #10000 1'b1;
	C[5] = #10000 1'b0;
	C[5] = #30000 1'b1;
	C[5] = #10000 1'b0;
	C[5] = #10000 1'b1;
	C[5] = #20000 1'b0;
	C[5] = #90000 1'b1;
end 
// C[ 4 ]
initial
begin
	C[4] = 1'b0;
	C[4] = #50000 1'b1;
	C[4] = #30000 1'b0;
	C[4] = #10000 1'b1;
	C[4] = #20000 1'b0;
	C[4] = #10000 1'b1;
	C[4] = #50000 1'b0;
	C[4] = #20000 1'b1;
	C[4] = #40000 1'b0;
	C[4] = #10000 1'b1;
	C[4] = #10000 1'b0;
	C[4] = #10000 1'b1;
	C[4] = #30000 1'b0;
	C[4] = #30000 1'b1;
	C[4] = #20000 1'b0;
	C[4] = #20000 1'b1;
	C[4] = #60000 1'b0;
	C[4] = #20000 1'b1;
	C[4] = #40000 1'b0;
	C[4] = #30000 1'b1;
	C[4] = #10000 1'b0;
	C[4] = #10000 1'b1;
	C[4] = #10000 1'b0;
	C[4] = #40000 1'b1;
	C[4] = #20000 1'b0;
	C[4] = #10000 1'b1;
	C[4] = #10000 1'b0;
	C[4] = #10000 1'b1;
	C[4] = #30000 1'b0;
	C[4] = #20000 1'b1;
	C[4] = #20000 1'b0;
	C[4] = #50000 1'b1;
	C[4] = #20000 1'b0;
	C[4] = #30000 1'b1;
	C[4] = #10000 1'b0;
	C[4] = #20000 1'b1;
	C[4] = #10000 1'b0;
	C[4] = #40000 1'b1;
	C[4] = #20000 1'b0;
	C[4] = #20000 1'b1;
	C[4] = #10000 1'b0;
	C[4] = #40000 1'b1;
end 
// C[ 3 ]
initial
begin
	C[3] = 1'b0;
	C[3] = #10000 1'b1;
	C[3] = #10000 1'b0;
	C[3] = #10000 1'b1;
	C[3] = #10000 1'b0;
	C[3] = #10000 1'b1;
	C[3] = #10000 1'b0;
	C[3] = #60000 1'b1;
	C[3] = #30000 1'b0;
	C[3] = #10000 1'b1;
	C[3] = #20000 1'b0;
	C[3] = #20000 1'b1;
	C[3] = #20000 1'b0;
	C[3] = #50000 1'b1;
	C[3] = #10000 1'b0;
	C[3] = #20000 1'b1;
	C[3] = #10000 1'b0;
	C[3] = #20000 1'b1;
	C[3] = #20000 1'b0;
	C[3] = #20000 1'b1;
	C[3] = #30000 1'b0;
	C[3] = #60000 1'b1;
	C[3] = #20000 1'b0;
	C[3] = #10000 1'b1;
	C[3] = #10000 1'b0;
	C[3] = #10000 1'b1;
	C[3] = #10000 1'b0;
	C[3] = #10000 1'b1;
	C[3] = #20000 1'b0;
	C[3] = #10000 1'b1;
	C[3] = #10000 1'b0;
	C[3] = #10000 1'b1;
	C[3] = #20000 1'b0;
	C[3] = #20000 1'b1;
	C[3] = #30000 1'b0;
	C[3] = #20000 1'b1;
	C[3] = #20000 1'b0;
	C[3] = #80000 1'b1;
	C[3] = #20000 1'b0;
	C[3] = #10000 1'b1;
	C[3] = #50000 1'b0;
	C[3] = #10000 1'b1;
	C[3] = #20000 1'b0;
	C[3] = #20000 1'b1;
	C[3] = #10000 1'b0;
	C[3] = #10000 1'b1;
	C[3] = #30000 1'b0;
	C[3] = #10000 1'b1;
	C[3] = #30000 1'b0;
end 
// C[ 2 ]
initial
begin
	C[2] = 1'b0;
	C[2] = #10000 1'b1;
	C[2] = #10000 1'b0;
	C[2] = #40000 1'b1;
	C[2] = #10000 1'b0;
	C[2] = #20000 1'b1;
	C[2] = #70000 1'b0;
	C[2] = #20000 1'b1;
	C[2] = #20000 1'b0;
	C[2] = #30000 1'b1;
	C[2] = #20000 1'b0;
	C[2] = #10000 1'b1;
	C[2] = #30000 1'b0;
	C[2] = #20000 1'b1;
	C[2] = #10000 1'b0;
	C[2] = #10000 1'b1;
	C[2] = #30000 1'b0;
	C[2] = #10000 1'b1;
	C[2] = #10000 1'b0;
	C[2] = #10000 1'b1;
	C[2] = #10000 1'b0;
	C[2] = #10000 1'b1;
	C[2] = #20000 1'b0;
	C[2] = #40000 1'b1;
	C[2] = #10000 1'b0;
	C[2] = #40000 1'b1;
	C[2] = #20000 1'b0;
	C[2] = #10000 1'b1;
	C[2] = #10000 1'b0;
	C[2] = #20000 1'b1;
	C[2] = #10000 1'b0;
	C[2] = #30000 1'b1;
	C[2] = #10000 1'b0;
	C[2] = #10000 1'b1;
	C[2] = #10000 1'b0;
	C[2] = #20000 1'b1;
	C[2] = #10000 1'b0;
	C[2] = #40000 1'b1;
	C[2] = #10000 1'b0;
	C[2] = #10000 1'b1;
	C[2] = #10000 1'b0;
	C[2] = #10000 1'b1;
	C[2] = #10000 1'b0;
	C[2] = #20000 1'b1;
	C[2] = #10000 1'b0;
	C[2] = #30000 1'b1;
	C[2] = #10000 1'b0;
	C[2] = #20000 1'b1;
	C[2] = #30000 1'b0;
	C[2] = #10000 1'b1;
	C[2] = #10000 1'b0;
	C[2] = #40000 1'b1;
	C[2] = #10000 1'b0;
	C[2] = #30000 1'b1;
end 
// C[ 1 ]
initial
begin
	C[1] = 1'b0;
	C[1] = #10000 1'b1;
	C[1] = #10000 1'b0;
	C[1] = #10000 1'b1;
	C[1] = #10000 1'b0;
	C[1] = #20000 1'b1;
	C[1] = #10000 1'b0;
	C[1] = #10000 1'b1;
	C[1] = #30000 1'b0;
	C[1] = #20000 1'b1;
	C[1] = #10000 1'b0;
	C[1] = #20000 1'b1;
	C[1] = #10000 1'b0;
	C[1] = #10000 1'b1;
	C[1] = #20000 1'b0;
	C[1] = #10000 1'b1;
	C[1] = #20000 1'b0;
	C[1] = #70000 1'b1;
	C[1] = #30000 1'b0;
	C[1] = #40000 1'b1;
	C[1] = #20000 1'b0;
	C[1] = #10000 1'b1;
	C[1] = #20000 1'b0;
	C[1] = #20000 1'b1;
	C[1] = #10000 1'b0;
	C[1] = #20000 1'b1;
	C[1] = #10000 1'b0;
	C[1] = #20000 1'b1;
	C[1] = #20000 1'b0;
	C[1] = #10000 1'b1;
	C[1] = #20000 1'b0;
	C[1] = #10000 1'b1;
	C[1] = #20000 1'b0;
	C[1] = #10000 1'b1;
	C[1] = #10000 1'b0;
	C[1] = #10000 1'b1;
	C[1] = #10000 1'b0;
	C[1] = #10000 1'b1;
	C[1] = #20000 1'b0;
	C[1] = #10000 1'b1;
	C[1] = #20000 1'b0;
	C[1] = #20000 1'b1;
	C[1] = #10000 1'b0;
	C[1] = #20000 1'b1;
	C[1] = #20000 1'b0;
	C[1] = #10000 1'b1;
	C[1] = #20000 1'b0;
	C[1] = #10000 1'b1;
	C[1] = #10000 1'b0;
	C[1] = #20000 1'b1;
	C[1] = #30000 1'b0;
	C[1] = #10000 1'b1;
	C[1] = #10000 1'b0;
	C[1] = #50000 1'b1;
	C[1] = #10000 1'b0;
	C[1] = #10000 1'b1;
	C[1] = #10000 1'b0;
	C[1] = #10000 1'b1;
	C[1] = #20000 1'b0;
end 
// C[ 0 ]
initial
begin
	C[0] = 1'b0;
	C[0] = #50000 1'b1;
	C[0] = #20000 1'b0;
	C[0] = #10000 1'b1;
	C[0] = #20000 1'b0;
	C[0] = #50000 1'b1;
	C[0] = #30000 1'b0;
	C[0] = #10000 1'b1;
	C[0] = #40000 1'b0;
	C[0] = #40000 1'b1;
	C[0] = #60000 1'b0;
	C[0] = #20000 1'b1;
	C[0] = #10000 1'b0;
	C[0] = #10000 1'b1;
	C[0] = #20000 1'b0;
	C[0] = #10000 1'b1;
	C[0] = #20000 1'b0;
	C[0] = #30000 1'b1;
	C[0] = #50000 1'b0;
	C[0] = #10000 1'b1;
	C[0] = #10000 1'b0;
	C[0] = #20000 1'b1;
	C[0] = #10000 1'b0;
	C[0] = #10000 1'b1;
	C[0] = #20000 1'b0;
	C[0] = #40000 1'b1;
	C[0] = #10000 1'b0;
	C[0] = #10000 1'b1;
	C[0] = #10000 1'b0;
	C[0] = #20000 1'b1;
	C[0] = #10000 1'b0;
	C[0] = #20000 1'b1;
	C[0] = #20000 1'b0;
	C[0] = #10000 1'b1;
	C[0] = #10000 1'b0;
	C[0] = #50000 1'b1;
	C[0] = #10000 1'b0;
	C[0] = #40000 1'b1;
	C[0] = #10000 1'b0;
	C[0] = #30000 1'b1;
	C[0] = #40000 1'b0;
	C[0] = #10000 1'b1;
	C[0] = #10000 1'b0;
	C[0] = #10000 1'b1;
	C[0] = #10000 1'b0;
	C[0] = #20000 1'b1;
	C[0] = #10000 1'b0;
end 
// D[ 7 ]
initial
begin
	D[7] = 1'b0;
	D[7] = #50000 1'b1;
	D[7] = #30000 1'b0;
	D[7] = #40000 1'b1;
	D[7] = #30000 1'b0;
	D[7] = #10000 1'b1;
	D[7] = #20000 1'b0;
	D[7] = #10000 1'b1;
	D[7] = #30000 1'b0;
	D[7] = #10000 1'b1;
	D[7] = #40000 1'b0;
	D[7] = #30000 1'b1;
	D[7] = #10000 1'b0;
	D[7] = #10000 1'b1;
	D[7] = #10000 1'b0;
	D[7] = #10000 1'b1;
	D[7] = #10000 1'b0;
	D[7] = #10000 1'b1;
	D[7] = #30000 1'b0;
	D[7] = #20000 1'b1;
	D[7] = #10000 1'b0;
	D[7] = #10000 1'b1;
	D[7] = #10000 1'b0;
	D[7] = #30000 1'b1;
	D[7] = #40000 1'b0;
	D[7] = #50000 1'b1;
	D[7] = #20000 1'b0;
	D[7] = #10000 1'b1;
	D[7] = #30000 1'b0;
	D[7] = #10000 1'b1;
	D[7] = #10000 1'b0;
	D[7] = #20000 1'b1;
	D[7] = #70000 1'b0;
	D[7] = #10000 1'b1;
	D[7] = #20000 1'b0;
	D[7] = #10000 1'b1;
	D[7] = #20000 1'b0;
	D[7] = #10000 1'b1;
	D[7] = #20000 1'b0;
	D[7] = #60000 1'b1;
	D[7] = #20000 1'b0;
	D[7] = #30000 1'b1;
	D[7] = #10000 1'b0;
	D[7] = #10000 1'b1;
	D[7] = #10000 1'b0;
	D[7] = #10000 1'b1;
	D[7] = #10000 1'b0;
end 
// D[ 6 ]
initial
begin
	D[6] = 1'b0;
	D[6] = #50000 1'b1;
	D[6] = #10000 1'b0;
	D[6] = #20000 1'b1;
	D[6] = #10000 1'b0;
	D[6] = #10000 1'b1;
	D[6] = #10000 1'b0;
	D[6] = #10000 1'b1;
	D[6] = #10000 1'b0;
	D[6] = #10000 1'b1;
	D[6] = #40000 1'b0;
	D[6] = #10000 1'b1;
	D[6] = #50000 1'b0;
	D[6] = #40000 1'b1;
	D[6] = #20000 1'b0;
	D[6] = #10000 1'b1;
	D[6] = #10000 1'b0;
	D[6] = #40000 1'b1;
	D[6] = #30000 1'b0;
	D[6] = #50000 1'b1;
	D[6] = #20000 1'b0;
	D[6] = #10000 1'b1;
	D[6] = #20000 1'b0;
	D[6] = #20000 1'b1;
	D[6] = #20000 1'b0;
	D[6] = #10000 1'b1;
	D[6] = #10000 1'b0;
	D[6] = #20000 1'b1;
	D[6] = #30000 1'b0;
	D[6] = #10000 1'b1;
	D[6] = #20000 1'b0;
	D[6] = #10000 1'b1;
	D[6] = #30000 1'b0;
	D[6] = #40000 1'b1;
	D[6] = #20000 1'b0;
	D[6] = #10000 1'b1;
	D[6] = #10000 1'b0;
	D[6] = #10000 1'b1;
	D[6] = #10000 1'b0;
	D[6] = #10000 1'b1;
	D[6] = #30000 1'b0;
	D[6] = #40000 1'b1;
	D[6] = #10000 1'b0;
	D[6] = #10000 1'b1;
	D[6] = #20000 1'b0;
	D[6] = #10000 1'b1;
	D[6] = #10000 1'b0;
	D[6] = #10000 1'b1;
	D[6] = #10000 1'b0;
	D[6] = #10000 1'b1;
	D[6] = #10000 1'b0;
	D[6] = #30000 1'b1;
end 
// D[ 5 ]
initial
begin
	D[5] = 1'b0;
	D[5] = #10000 1'b1;
	D[5] = #10000 1'b0;
	D[5] = #20000 1'b1;
	D[5] = #10000 1'b0;
	D[5] = #60000 1'b1;
	D[5] = #10000 1'b0;
	D[5] = #40000 1'b1;
	D[5] = #30000 1'b0;
	D[5] = #20000 1'b1;
	D[5] = #30000 1'b0;
	D[5] = #30000 1'b1;
	D[5] = #10000 1'b0;
	D[5] = #20000 1'b1;
	D[5] = #10000 1'b0;
	D[5] = #10000 1'b1;
	D[5] = #20000 1'b0;
	D[5] = #20000 1'b1;
	D[5] = #30000 1'b0;
	D[5] = #10000 1'b1;
	D[5] = #40000 1'b0;
	D[5] = #70000 1'b1;
	D[5] = #20000 1'b0;
	D[5] = #10000 1'b1;
	D[5] = #20000 1'b0;
	D[5] = #60000 1'b1;
	D[5] = #10000 1'b0;
	D[5] = #40000 1'b1;
	D[5] = #10000 1'b0;
	D[5] = #30000 1'b1;
	D[5] = #10000 1'b0;
	D[5] = #20000 1'b1;
	D[5] = #10000 1'b0;
	D[5] = #10000 1'b1;
	D[5] = #20000 1'b0;
	D[5] = #10000 1'b1;
	D[5] = #20000 1'b0;
	D[5] = #20000 1'b1;
	D[5] = #20000 1'b0;
	D[5] = #10000 1'b1;
	D[5] = #10000 1'b0;
	D[5] = #40000 1'b1;
	D[5] = #20000 1'b0;
	D[5] = #10000 1'b1;
	D[5] = #10000 1'b0;
	D[5] = #20000 1'b1;
end 
// D[ 4 ]
initial
begin
	D[4] = 1'b0;
	D[4] = #20000 1'b1;
	D[4] = #10000 1'b0;
	D[4] = #70000 1'b1;
	D[4] = #40000 1'b0;
	D[4] = #10000 1'b1;
	D[4] = #20000 1'b0;
	D[4] = #10000 1'b1;
	D[4] = #10000 1'b0;
	D[4] = #20000 1'b1;
	D[4] = #10000 1'b0;
	D[4] = #50000 1'b1;
	D[4] = #10000 1'b0;
	D[4] = #10000 1'b1;
	D[4] = #20000 1'b0;
	D[4] = #10000 1'b1;
	D[4] = #20000 1'b0;
	D[4] = #20000 1'b1;
	D[4] = #20000 1'b0;
	D[4] = #20000 1'b1;
	D[4] = #30000 1'b0;
	D[4] = #20000 1'b1;
	D[4] = #10000 1'b0;
	D[4] = #40000 1'b1;
	D[4] = #10000 1'b0;
	D[4] = #90000 1'b1;
	D[4] = #20000 1'b0;
	D[4] = #10000 1'b1;
	D[4] = #40000 1'b0;
	D[4] = #10000 1'b1;
	D[4] = #10000 1'b0;
	D[4] = #10000 1'b1;
	D[4] = #10000 1'b0;
	D[4] = #10000 1'b1;
	D[4] = #20000 1'b0;
	D[4] = #10000 1'b1;
	D[4] = #20000 1'b0;
	D[4] = #30000 1'b1;
	D[4] = #10000 1'b0;
	D[4] = #30000 1'b1;
	D[4] = #20000 1'b0;
	D[4] = #10000 1'b1;
	D[4] = #10000 1'b0;
	D[4] = #20000 1'b1;
	D[4] = #40000 1'b0;
	D[4] = #20000 1'b1;
	D[4] = #20000 1'b0;
	D[4] = #10000 1'b1;
end 
// D[ 3 ]
initial
begin
	D[3] = 1'b0;
	D[3] = #20000 1'b1;
	D[3] = #10000 1'b0;
	D[3] = #10000 1'b1;
	D[3] = #10000 1'b0;
	D[3] = #30000 1'b1;
	D[3] = #10000 1'b0;
	D[3] = #30000 1'b1;
	D[3] = #10000 1'b0;
	D[3] = #20000 1'b1;
	D[3] = #30000 1'b0;
	D[3] = #40000 1'b1;
	D[3] = #10000 1'b0;
	D[3] = #10000 1'b1;
	D[3] = #40000 1'b0;
	D[3] = #70000 1'b1;
	D[3] = #10000 1'b0;
	D[3] = #10000 1'b1;
	D[3] = #50000 1'b0;
	D[3] = #20000 1'b1;
	D[3] = #10000 1'b0;
	D[3] = #20000 1'b1;
	D[3] = #60000 1'b0;
	D[3] = #20000 1'b1;
	D[3] = #20000 1'b0;
	D[3] = #10000 1'b1;
	D[3] = #30000 1'b0;
	D[3] = #10000 1'b1;
	D[3] = #10000 1'b0;
	D[3] = #40000 1'b1;
	D[3] = #50000 1'b0;
	D[3] = #10000 1'b1;
	D[3] = #20000 1'b0;
	D[3] = #10000 1'b1;
	D[3] = #30000 1'b0;
	D[3] = #20000 1'b1;
	D[3] = #10000 1'b0;
	D[3] = #20000 1'b1;
	D[3] = #10000 1'b0;
	D[3] = #10000 1'b1;
	D[3] = #20000 1'b0;
	D[3] = #10000 1'b1;
	D[3] = #20000 1'b0;
	D[3] = #10000 1'b1;
	D[3] = #10000 1'b0;
end 
// D[ 2 ]
initial
begin
	D[2] = 1'b0;
	D[2] = #40000 1'b1;
	D[2] = #40000 1'b0;
	D[2] = #20000 1'b1;
	D[2] = #30000 1'b0;
	D[2] = #10000 1'b1;
	D[2] = #10000 1'b0;
	D[2] = #10000 1'b1;
	D[2] = #10000 1'b0;
	D[2] = #10000 1'b1;
	D[2] = #10000 1'b0;
	D[2] = #20000 1'b1;
	D[2] = #50000 1'b0;
	D[2] = #20000 1'b1;
	D[2] = #20000 1'b0;
	D[2] = #10000 1'b1;
	D[2] = #20000 1'b0;
	D[2] = #10000 1'b1;
	D[2] = #10000 1'b0;
	D[2] = #10000 1'b1;
	D[2] = #10000 1'b0;
	D[2] = #10000 1'b1;
	D[2] = #20000 1'b0;
	D[2] = #10000 1'b1;
	D[2] = #10000 1'b0;
	D[2] = #20000 1'b1;
	D[2] = #10000 1'b0;
	D[2] = #10000 1'b1;
	D[2] = #40000 1'b0;
	D[2] = #50000 1'b1;
	D[2] = #10000 1'b0;
	D[2] = #10000 1'b1;
	D[2] = #10000 1'b0;
	D[2] = #40000 1'b1;
	D[2] = #30000 1'b0;
	D[2] = #40000 1'b1;
	D[2] = #20000 1'b0;
	D[2] = #40000 1'b1;
	D[2] = #20000 1'b0;
	D[2] = #20000 1'b1;
	D[2] = #10000 1'b0;
	D[2] = #20000 1'b1;
	D[2] = #10000 1'b0;
	D[2] = #10000 1'b1;
	D[2] = #10000 1'b0;
	D[2] = #10000 1'b1;
	D[2] = #50000 1'b0;
	D[2] = #10000 1'b1;
	D[2] = #20000 1'b0;
	D[2] = #10000 1'b1;
	D[2] = #10000 1'b0;
	D[2] = #20000 1'b1;
	D[2] = #10000 1'b0;
end 
// D[ 1 ]
initial
begin
	D[1] = 1'b0;
	D[1] = #60000 1'b1;
	D[1] = #20000 1'b0;
	D[1] = #10000 1'b1;
	D[1] = #10000 1'b0;
	D[1] = #10000 1'b1;
	D[1] = #20000 1'b0;
	D[1] = #20000 1'b1;
	D[1] = #30000 1'b0;
	D[1] = #10000 1'b1;
	D[1] = #10000 1'b0;
	D[1] = #20000 1'b1;
	D[1] = #20000 1'b0;
	D[1] = #10000 1'b1;
	D[1] = #30000 1'b0;
	D[1] = #30000 1'b1;
	D[1] = #30000 1'b0;
	D[1] = #20000 1'b1;
	D[1] = #10000 1'b0;
	D[1] = #40000 1'b1;
	D[1] = #30000 1'b0;
	D[1] = #10000 1'b1;
	D[1] = #30000 1'b0;
	D[1] = #10000 1'b1;
	D[1] = #30000 1'b0;
	D[1] = #20000 1'b1;
	D[1] = #10000 1'b0;
	D[1] = #10000 1'b1;
	D[1] = #20000 1'b0;
	D[1] = #10000 1'b1;
	D[1] = #20000 1'b0;
	D[1] = #10000 1'b1;
	D[1] = #60000 1'b0;
	D[1] = #20000 1'b1;
	D[1] = #10000 1'b0;
	D[1] = #20000 1'b1;
	D[1] = #30000 1'b0;
	D[1] = #10000 1'b1;
	D[1] = #10000 1'b0;
	D[1] = #20000 1'b1;
	D[1] = #10000 1'b0;
	D[1] = #10000 1'b1;
	D[1] = #20000 1'b0;
	D[1] = #30000 1'b1;
	D[1] = #10000 1'b0;
	D[1] = #10000 1'b1;
	D[1] = #10000 1'b0;
	D[1] = #10000 1'b1;
	D[1] = #10000 1'b0;
	D[1] = #10000 1'b1;
	D[1] = #10000 1'b0;
	D[1] = #30000 1'b1;
	D[1] = #10000 1'b0;
	D[1] = #10000 1'b1;
end 
// D[ 0 ]
initial
begin
	D[0] = 1'b0;
	D[0] = #10000 1'b1;
	D[0] = #20000 1'b0;
	D[0] = #10000 1'b1;
	D[0] = #10000 1'b0;
	D[0] = #30000 1'b1;
	D[0] = #40000 1'b0;
	D[0] = #20000 1'b1;
	D[0] = #10000 1'b0;
	D[0] = #10000 1'b1;
	D[0] = #20000 1'b0;
	D[0] = #50000 1'b1;
	D[0] = #10000 1'b0;
	D[0] = #10000 1'b1;
	D[0] = #40000 1'b0;
	D[0] = #10000 1'b1;
	D[0] = #10000 1'b0;
	D[0] = #10000 1'b1;
	D[0] = #10000 1'b0;
	D[0] = #20000 1'b1;
	D[0] = #10000 1'b0;
	D[0] = #40000 1'b1;
	D[0] = #10000 1'b0;
	D[0] = #40000 1'b1;
	D[0] = #30000 1'b0;
	D[0] = #10000 1'b1;
	D[0] = #10000 1'b0;
	D[0] = #10000 1'b1;
	D[0] = #10000 1'b0;
	D[0] = #10000 1'b1;
	D[0] = #10000 1'b0;
	D[0] = #20000 1'b1;
	D[0] = #20000 1'b0;
	D[0] = #20000 1'b1;
	D[0] = #30000 1'b0;
	D[0] = #30000 1'b1;
	D[0] = #20000 1'b0;
	D[0] = #10000 1'b1;
	D[0] = #10000 1'b0;
	D[0] = #20000 1'b1;
	D[0] = #20000 1'b0;
	D[0] = #10000 1'b1;
	D[0] = #10000 1'b0;
	D[0] = #10000 1'b1;
	D[0] = #10000 1'b0;
	D[0] = #10000 1'b1;
	D[0] = #10000 1'b0;
	D[0] = #30000 1'b1;
	D[0] = #10000 1'b0;
	D[0] = #20000 1'b1;
	D[0] = #10000 1'b0;
	D[0] = #10000 1'b1;
	D[0] = #10000 1'b0;
	D[0] = #10000 1'b1;
	D[0] = #30000 1'b0;
	D[0] = #30000 1'b1;
	D[0] = #20000 1'b0;
end 
// E[ 7 ]
initial
begin
	E[7] = 1'b0;
	E[7] = #10000 1'b1;
	E[7] = #10000 1'b0;
	E[7] = #20000 1'b1;
	E[7] = #20000 1'b0;
	E[7] = #10000 1'b1;
	E[7] = #10000 1'b0;
	E[7] = #70000 1'b1;
	E[7] = #70000 1'b0;
	E[7] = #10000 1'b1;
	E[7] = #10000 1'b0;
	E[7] = #10000 1'b1;
	E[7] = #10000 1'b0;
	E[7] = #20000 1'b1;
	E[7] = #20000 1'b0;
	E[7] = #10000 1'b1;
	E[7] = #20000 1'b0;
	E[7] = #20000 1'b1;
	E[7] = #10000 1'b0;
	E[7] = #20000 1'b1;
	E[7] = #10000 1'b0;
	E[7] = #20000 1'b1;
	E[7] = #20000 1'b0;
	E[7] = #10000 1'b1;
	E[7] = #10000 1'b0;
	E[7] = #50000 1'b1;
	E[7] = #70000 1'b0;
	E[7] = #30000 1'b1;
	E[7] = #10000 1'b0;
	E[7] = #10000 1'b1;
	E[7] = #10000 1'b0;
	E[7] = #30000 1'b1;
	E[7] = #20000 1'b0;
	E[7] = #10000 1'b1;
	E[7] = #10000 1'b0;
	E[7] = #20000 1'b1;
	E[7] = #10000 1'b0;
	E[7] = #30000 1'b1;
	E[7] = #10000 1'b0;
	E[7] = #10000 1'b1;
	E[7] = #30000 1'b0;
	E[7] = #20000 1'b1;
	E[7] = #30000 1'b0;
	E[7] = #10000 1'b1;
	E[7] = #20000 1'b0;
	E[7] = #50000 1'b1;
	E[7] = #30000 1'b0;
end 
// E[ 6 ]
initial
begin
	E[6] = 1'b0;
	E[6] = #10000 1'b1;
	E[6] = #30000 1'b0;
	E[6] = #30000 1'b1;
	E[6] = #10000 1'b0;
	E[6] = #10000 1'b1;
	E[6] = #10000 1'b0;
	E[6] = #20000 1'b1;
	E[6] = #10000 1'b0;
	E[6] = #20000 1'b1;
	E[6] = #20000 1'b0;
	E[6] = #10000 1'b1;
	E[6] = #20000 1'b0;
	E[6] = #30000 1'b1;
	E[6] = #20000 1'b0;
	E[6] = #10000 1'b1;
	E[6] = #10000 1'b0;
	E[6] = #30000 1'b1;
	E[6] = #40000 1'b0;
	E[6] = #10000 1'b1;
	E[6] = #10000 1'b0;
	E[6] = #20000 1'b1;
	E[6] = #90000 1'b0;
	E[6] = #10000 1'b1;
	E[6] = #10000 1'b0;
	E[6] = #10000 1'b1;
	E[6] = #20000 1'b0;
	E[6] = #30000 1'b1;
	E[6] = #10000 1'b0;
	E[6] = #30000 1'b1;
	E[6] = #30000 1'b0;
	E[6] = #60000 1'b1;
	E[6] = #20000 1'b0;
	E[6] = #20000 1'b1;
	E[6] = #20000 1'b0;
	E[6] = #20000 1'b1;
	E[6] = #20000 1'b0;
	E[6] = #50000 1'b1;
	E[6] = #10000 1'b0;
	E[6] = #10000 1'b1;
	E[6] = #10000 1'b0;
	E[6] = #50000 1'b1;
	E[6] = #40000 1'b0;
end 
// E[ 5 ]
initial
begin
	E[5] = 1'b0;
	E[5] = #30000 1'b1;
	E[5] = #10000 1'b0;
	E[5] = #30000 1'b1;
	E[5] = #20000 1'b0;
	E[5] = #30000 1'b1;
	E[5] = #40000 1'b0;
	E[5] = #10000 1'b1;
	E[5] = #10000 1'b0;
	E[5] = #10000 1'b1;
	E[5] = #20000 1'b0;
	E[5] = #10000 1'b1;
	E[5] = #10000 1'b0;
	E[5] = #10000 1'b1;
	E[5] = #10000 1'b0;
	E[5] = #20000 1'b1;
	E[5] = #10000 1'b0;
	E[5] = #20000 1'b1;
	E[5] = #20000 1'b0;
	E[5] = #20000 1'b1;
	E[5] = #20000 1'b0;
	E[5] = #20000 1'b1;
	E[5] = #20000 1'b0;
	E[5] = #10000 1'b1;
	E[5] = #30000 1'b0;
	E[5] = #20000 1'b1;
	E[5] = #10000 1'b0;
	E[5] = #20000 1'b1;
	E[5] = #10000 1'b0;
	E[5] = #10000 1'b1;
	E[5] = #40000 1'b0;
	E[5] = #10000 1'b1;
	E[5] = #10000 1'b0;
	E[5] = #10000 1'b1;
	E[5] = #20000 1'b0;
	E[5] = #20000 1'b1;
	E[5] = #10000 1'b0;
	E[5] = #10000 1'b1;
	E[5] = #10000 1'b0;
	E[5] = #10000 1'b1;
	E[5] = #10000 1'b0;
	E[5] = #30000 1'b1;
	E[5] = #10000 1'b0;
	E[5] = #40000 1'b1;
	E[5] = #20000 1'b0;
	E[5] = #30000 1'b1;
	E[5] = #30000 1'b0;
	E[5] = #10000 1'b1;
	E[5] = #10000 1'b0;
	E[5] = #10000 1'b1;
	E[5] = #10000 1'b0;
	E[5] = #10000 1'b1;
	E[5] = #20000 1'b0;
	E[5] = #30000 1'b1;
	E[5] = #10000 1'b0;
	E[5] = #10000 1'b1;
	E[5] = #10000 1'b0;
	E[5] = #20000 1'b1;
end 
// E[ 4 ]
initial
begin
	E[4] = 1'b0;
	E[4] = #40000 1'b1;
	E[4] = #10000 1'b0;
	E[4] = #50000 1'b1;
	E[4] = #20000 1'b0;
	E[4] = #10000 1'b1;
	E[4] = #10000 1'b0;
	E[4] = #10000 1'b1;
	E[4] = #20000 1'b0;
	E[4] = #10000 1'b1;
	E[4] = #10000 1'b0;
	E[4] = #10000 1'b1;
	E[4] = #10000 1'b0;
	E[4] = #10000 1'b1;
	E[4] = #10000 1'b0;
	E[4] = #20000 1'b1;
	E[4] = #10000 1'b0;
	E[4] = #20000 1'b1;
	E[4] = #20000 1'b0;
	E[4] = #30000 1'b1;
	E[4] = #40000 1'b0;
	E[4] = #10000 1'b1;
	E[4] = #20000 1'b0;
	E[4] = #10000 1'b1;
	E[4] = #50000 1'b0;
	E[4] = #20000 1'b1;
	E[4] = #10000 1'b0;
	E[4] = #10000 1'b1;
	E[4] = #10000 1'b0;
	E[4] = #50000 1'b1;
	E[4] = #80000 1'b0;
	E[4] = #10000 1'b1;
	E[4] = #50000 1'b0;
	E[4] = #10000 1'b1;
	E[4] = #40000 1'b0;
	E[4] = #30000 1'b1;
	E[4] = #20000 1'b0;
	E[4] = #40000 1'b1;
	E[4] = #10000 1'b0;
	E[4] = #10000 1'b1;
	E[4] = #20000 1'b0;
	E[4] = #20000 1'b1;
	E[4] = #10000 1'b0;
	E[4] = #30000 1'b1;
	E[4] = #10000 1'b0;
	E[4] = #10000 1'b1;
	E[4] = #20000 1'b0;
end 
// E[ 3 ]
initial
begin
	E[3] = 1'b0;
	E[3] = #40000 1'b1;
	E[3] = #30000 1'b0;
	E[3] = #30000 1'b1;
	E[3] = #10000 1'b0;
	E[3] = #30000 1'b1;
	E[3] = #10000 1'b0;
	E[3] = #10000 1'b1;
	E[3] = #10000 1'b0;
	E[3] = #20000 1'b1;
	E[3] = #20000 1'b0;
	E[3] = #20000 1'b1;
	E[3] = #30000 1'b0;
	E[3] = #10000 1'b1;
	E[3] = #20000 1'b0;
	E[3] = #10000 1'b1;
	E[3] = #10000 1'b0;
	E[3] = #30000 1'b1;
	E[3] = #30000 1'b0;
	E[3] = #10000 1'b1;
	E[3] = #80000 1'b0;
	E[3] = #10000 1'b1;
	E[3] = #50000 1'b0;
	E[3] = #50000 1'b1;
	E[3] = #10000 1'b0;
	E[3] = #30000 1'b1;
	E[3] = #40000 1'b0;
	E[3] = #10000 1'b1;
	E[3] = #10000 1'b0;
	E[3] = #20000 1'b1;
	E[3] = #10000 1'b0;
	E[3] = #10000 1'b1;
	E[3] = #30000 1'b0;
	E[3] = #30000 1'b1;
	E[3] = #20000 1'b0;
	E[3] = #10000 1'b1;
	E[3] = #10000 1'b0;
	E[3] = #10000 1'b1;
	E[3] = #30000 1'b0;
	E[3] = #10000 1'b1;
	E[3] = #10000 1'b0;
	E[3] = #10000 1'b1;
	E[3] = #10000 1'b0;
	E[3] = #20000 1'b1;
	E[3] = #10000 1'b0;
	E[3] = #10000 1'b1;
	E[3] = #10000 1'b0;
	E[3] = #10000 1'b1;
	E[3] = #20000 1'b0;
	E[3] = #10000 1'b1;
end 
// E[ 2 ]
initial
begin
	E[2] = 1'b0;
	E[2] = #10000 1'b1;
	E[2] = #30000 1'b0;
	E[2] = #10000 1'b1;
	E[2] = #20000 1'b0;
	E[2] = #10000 1'b1;
	E[2] = #50000 1'b0;
	E[2] = #10000 1'b1;
	E[2] = #40000 1'b0;
	E[2] = #10000 1'b1;
	E[2] = #20000 1'b0;
	E[2] = #10000 1'b1;
	E[2] = #30000 1'b0;
	E[2] = #10000 1'b1;
	E[2] = #40000 1'b0;
	E[2] = #20000 1'b1;
	E[2] = #20000 1'b0;
	E[2] = #10000 1'b1;
	E[2] = #30000 1'b0;
	E[2] = #10000 1'b1;
	E[2] = #20000 1'b0;
	E[2] = #10000 1'b1;
	E[2] = #20000 1'b0;
	E[2] = #30000 1'b1;
	E[2] = #10000 1'b0;
	E[2] = #10000 1'b1;
	E[2] = #10000 1'b0;
	E[2] = #10000 1'b1;
	E[2] = #10000 1'b0;
	E[2] = #50000 1'b1;
	E[2] = #10000 1'b0;
	E[2] = #10000 1'b1;
	E[2] = #20000 1'b0;
	E[2] = #10000 1'b1;
	E[2] = #30000 1'b0;
	E[2] = #30000 1'b1;
	E[2] = #20000 1'b0;
	E[2] = #30000 1'b1;
	E[2] = #10000 1'b0;
	E[2] = #20000 1'b1;
	E[2] = #10000 1'b0;
	E[2] = #20000 1'b1;
	E[2] = #10000 1'b0;
	E[2] = #10000 1'b1;
	E[2] = #10000 1'b0;
	E[2] = #20000 1'b1;
	E[2] = #10000 1'b0;
	E[2] = #10000 1'b1;
	E[2] = #20000 1'b0;
	E[2] = #30000 1'b1;
	E[2] = #20000 1'b0;
	E[2] = #10000 1'b1;
	E[2] = #10000 1'b0;
	E[2] = #20000 1'b1;
	E[2] = #10000 1'b0;
	E[2] = #10000 1'b1;
end 
// E[ 1 ]
initial
begin
	E[1] = 1'b0;
	E[1] = #10000 1'b1;
	E[1] = #10000 1'b0;
	E[1] = #30000 1'b1;
	E[1] = #20000 1'b0;
	E[1] = #20000 1'b1;
	E[1] = #30000 1'b0;
	E[1] = #50000 1'b1;
	E[1] = #10000 1'b0;
	E[1] = #10000 1'b1;
	E[1] = #10000 1'b0;
	E[1] = #10000 1'b1;
	E[1] = #10000 1'b0;
	E[1] = #10000 1'b1;
	E[1] = #20000 1'b0;
	E[1] = #20000 1'b1;
	E[1] = #10000 1'b0;
	E[1] = #70000 1'b1;
	E[1] = #10000 1'b0;
	E[1] = #30000 1'b1;
	E[1] = #30000 1'b0;
	E[1] = #20000 1'b1;
	E[1] = #20000 1'b0;
	E[1] = #10000 1'b1;
	E[1] = #20000 1'b0;
	E[1] = #10000 1'b1;
	E[1] = #10000 1'b0;
	E[1] = #20000 1'b1;
	E[1] = #10000 1'b0;
	E[1] = #10000 1'b1;
	E[1] = #30000 1'b0;
	E[1] = #10000 1'b1;
	E[1] = #20000 1'b0;
	E[1] = #10000 1'b1;
	E[1] = #30000 1'b0;
	E[1] = #10000 1'b1;
	E[1] = #20000 1'b0;
	E[1] = #10000 1'b1;
	E[1] = #40000 1'b0;
	E[1] = #30000 1'b1;
	E[1] = #50000 1'b0;
	E[1] = #40000 1'b1;
	E[1] = #30000 1'b0;
	E[1] = #40000 1'b1;
	E[1] = #20000 1'b0;
	E[1] = #10000 1'b1;
	E[1] = #10000 1'b0;
	E[1] = #20000 1'b1;
	E[1] = #10000 1'b0;
end 
// E[ 0 ]
initial
begin
	E[0] = 1'b0;
	E[0] = #20000 1'b1;
	E[0] = #10000 1'b0;
	E[0] = #20000 1'b1;
	E[0] = #20000 1'b0;
	E[0] = #70000 1'b1;
	E[0] = #10000 1'b0;
	E[0] = #10000 1'b1;
	E[0] = #10000 1'b0;
	E[0] = #20000 1'b1;
	E[0] = #20000 1'b0;
	E[0] = #10000 1'b1;
	E[0] = #10000 1'b0;
	E[0] = #20000 1'b1;
	E[0] = #20000 1'b0;
	E[0] = #10000 1'b1;
	E[0] = #10000 1'b0;
	E[0] = #30000 1'b1;
	E[0] = #10000 1'b0;
	E[0] = #10000 1'b1;
	E[0] = #20000 1'b0;
	E[0] = #10000 1'b1;
	E[0] = #10000 1'b0;
	E[0] = #10000 1'b1;
	E[0] = #30000 1'b0;
	E[0] = #30000 1'b1;
	E[0] = #60000 1'b0;
	E[0] = #10000 1'b1;
	E[0] = #40000 1'b0;
	E[0] = #10000 1'b1;
	E[0] = #30000 1'b0;
	E[0] = #10000 1'b1;
	E[0] = #20000 1'b0;
	E[0] = #20000 1'b1;
	E[0] = #10000 1'b0;
	E[0] = #30000 1'b1;
	E[0] = #10000 1'b0;
	E[0] = #10000 1'b1;
	E[0] = #10000 1'b0;
	E[0] = #60000 1'b1;
	E[0] = #20000 1'b0;
	E[0] = #60000 1'b1;
	E[0] = #20000 1'b0;
	E[0] = #20000 1'b1;
	E[0] = #10000 1'b0;
	E[0] = #50000 1'b1;
	E[0] = #10000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// d
initial
begin
	d = 1'b1;
	d = #15000 1'b0;
	d = #20000 1'b1;
	d = #10000 1'b0;
	d = #5000 1'b1;
	d = #5000 1'b0;
	d = #10000 1'b1;
	d = #5000 1'b0;
	d = #10000 1'b1;
	d = #15000 1'b0;
	d = #25000 1'b1;
	d = #10000 1'b0;
	d = #10000 1'b1;
	d = #5000 1'b0;
	d = #5000 1'b1;
	d = #20000 1'b0;
	d = #10000 1'b1;
	d = #20000 1'b0;
	d = #5000 1'b1;
	d = #10000 1'b0;
	d = #5000 1'b1;
	d = #5000 1'b0;
	d = #15000 1'b1;
	d = #5000 1'b0;
	d = #5000 1'b1;
	d = #10000 1'b0;
	d = #10000 1'b1;
	d = #5000 1'b0;
	d = #5000 1'b1;
	d = #5000 1'b0;
	d = #5000 1'b1;
	d = #5000 1'b0;
	d = #5000 1'b1;
	d = #10000 1'b0;
	d = #5000 1'b1;
	d = #20000 1'b0;
	d = #25000 1'b1;
	d = #5000 1'b0;
	d = #5000 1'b1;
	d = #5000 1'b0;
	d = #5000 1'b1;
	d = #5000 1'b0;
	d = #10000 1'b1;
	d = #20000 1'b0;
	d = #15000 1'b1;
	d = #30000 1'b0;
	d = #5000 1'b1;
	d = #10000 1'b0;
	d = #10000 1'b1;
	d = #25000 1'b0;
	d = #10000 1'b1;
	d = #10000 1'b0;
	d = #10000 1'b1;
	d = #5000 1'b0;
	d = #15000 1'b1;
	d = #20000 1'b0;
	d = #5000 1'b1;
	d = #5000 1'b0;
	d = #10000 1'b1;
	d = #5000 1'b0;
	d = #10000 1'b1;
	d = #5000 1'b0;
	d = #5000 1'b1;
	d = #10000 1'b0;
	d = #15000 1'b1;
	d = #10000 1'b0;
	d = #10000 1'b1;
	d = #10000 1'b0;
	d = #5000 1'b1;
	d = #5000 1'b0;
	d = #5000 1'b1;
	d = #35000 1'b0;
	d = #15000 1'b1;
	d = #5000 1'b0;
	d = #5000 1'b1;
	d = #30000 1'b0;
	d = #10000 1'b1;
	d = #10000 1'b0;
	d = #10000 1'b1;
	d = #30000 1'b0;
	d = #5000 1'b1;
	d = #15000 1'b0;
	d = #5000 1'b1;
	d = #10000 1'b0;
	d = #10000 1'b1;
	d = #20000 1'b0;
	d = #5000 1'b1;
	d = #5000 1'b0;
	d = #5000 1'b1;
	d = #20000 1'b0;
	d = #30000 1'b1;
	d = #10000 1'b0;
	d = #10000 1'b1;
end 

main_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.E(E),
	.clk(clk),
	.d(d),
	.sampler_tx(sampler)
);

main_vlg_check_tst tb_out(
	.DATA_OUT(DATA_OUT),
	.F(F),
	.out(out),
	.sampler_rx(sampler)
);
endmodule

